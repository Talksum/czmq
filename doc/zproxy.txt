zproxy(3)
=========

NAME
----
zproxy - convenient zmq_proxy API

SYNOPSIS
--------
----
//  Create a new zproxy object
CZMQ_EXPORT zproxy_t *
    zproxy_new (zctx_t *ctx, int zproxy_type);

//  Destroy a zproxy object
CZMQ_EXPORT void
    zproxy_destroy (zproxy_t **self_p);

// Underlying libzmq supports zmq_proxy
#if (ZMQ_VERSION >= ZPROXY_HAS_PROXY)

//  Get zproxy capture address
CZMQ_EXPORT char *
    zproxy_capture_addr (zproxy_t *self);

//  Get zproxy capture type
CZMQ_EXPORT int
    zproxy_capture_type (zproxy_t *self);

// Underlying libzmq also supports zmq_proxy_steerable
#if (ZMQ_VERSION >= ZPROXY_HAS_STEERABLE)

//  Start a zproxy in an attached thread, binding to endpoints.
//  If capture_addr is not null, will create a capture socket.
//  If control_addr is not null, will use zmq_proxy_steerable
//  Returns 0 if OK, -1 if there was an error
CZMQ_EXPORT int
    zproxy_bind (zproxy_t *self, char *frontend_addr,
            char *backend_addr, char *capture_addr,
            char *control_addr);

// Set the identity for the front end socket manually.
// Must be done before call to zproxy_bind!
CZMQ_EXPORT void
    zproxy_set_frontend_identity (zproxy_t *self, char *frontend_identity);

// Set the identity for the back end socket manually.
// Must be done before call to zproxy_bind!
CZMQ_EXPORT void
    zproxy_set_backend_identity (zproxy_t *self, char *backend_identity);

// Pause a zproxy object
CZMQ_EXPORT void
    zproxy_pause (zproxy_t *self);

// Resume a zproxy object
CZMQ_EXPORT void
    zproxy_resume (zproxy_t *self);

// Terminate a zproxy object
CZMQ_EXPORT void
    zproxy_terminate (zproxy_t *self);

// Underlying libzmq supports zmq_proxy but not zmq_proxy_steerable
#else

//  Start and zmq_proxy in an attached thread, binding to endpoints.
//  If capture_addr is not null, will create a capture socket.
//  Returns 0 if OK, -1 if there was an error
CZMQ_EXPORT int
    zproxy_bind (zproxy_t *self, char *frontend_addr,
            char *backend_addr, char *capture_addr);
#endif

// Underlying libzmq supports zmq_device and does not support
// zmq_proxy nor zmq_proxy_steerable
#else

//  Start a zproxy in an attached thread, binding to endpoints.
//  Returns 0 if OK, -1 if there was an error
CZMQ_EXPORT int
    zproxy_bind (zproxy_t *self, char *frontend_addr,
            char *backend_addr);

#endif 

// Self test of this class
CZMQ_EXPORT int
    zproxy_test (bool verbose);
----

DESCRIPTION
-----------

The zproxy class simplifies working with the zmq_proxy API.

I've modified zproxy to "do the right thing" depending
on both the underlying version of libzmq and arguments passed 
to zproxy_bind.  While this introduces quite a 
bit of complexity in this czmq class, the hope is that it
reduces a lot of complexity on behalf of the actual czmq user.

Note that because the zproxy_bind function signature changes
based on version of libzmq compiled against, swapping out the
underlying libzmq for an older version than compiled against
will cause code to fail.  This is intended behavior.

I have tested swapping out the underlying libzmq for newer
versions than compiled against, and this works.

The behavior for various cases is as follows:

------------------------------------------
ZMQ_VERSION >= ZPROXY_HAS_STEERABLE 

int
zproxy_bind (zproxy_t *self, char *frontend_addr,
        char *backend_addr, char *capture_addr,
        char *control_addr);

capture? | control?  | should call
YES      | YES       | zmq_proxy_steerable
NO       | YES       | zmq_proxy_steerable
YES      | NO        | zmq_proxy
NO       | NO        | zmq_proxy
   
------------------------------------------
ZMQ_VERSION >= ZPROXY_HAS_PROXY &&
ZMQ_VERSION < ZPROXY_HAS_STEERABLE

int
zproxy_bind (zproxy_t *self, char *frontend_addr,
        char *backend_addr, char *capture_addr);

capture? | should call
YES      | zmq_proxy
NO       | zmq_proxy

------------------------------------------
ZMQ_VERSION < ZPROXY_HAS_PROXY

int
zproxy_bind (zproxy_t *self, char *frontend_addr,
        char *backend_addr);

should call
zmq_proxy

EXAMPLE
-------
.From zproxy_test method
----
#if (ZMQ_VERSION >= ZPROXY_HAS_STEERABLE)

    char *frontend_addr = "inproc://proxy_front";
    char *backend_addr = "inproc://proxy_back";
    char *capture_addr = "inproc://proxy_capture";
    char *control_addr = "inproc://proxy_control";

    // Defining both a capture address and a control address
    // should create a zmq_proxy_steerable proxy that we
    // can control with a control port and capture data from
    // using the capture port.
    zctx_t *ctx = zctx_new ();
    zproxy_t *proxy = zproxy_new (ctx, ZPROXY_STREAMER);

    int rc = zproxy_bind (proxy, frontend_addr, backend_addr, 
            capture_addr, control_addr);

    assert (rc == 0);

    // Run the actual test
    s_zproxy_test_run (proxy, frontend_addr, backend_addr,
            capture_addr, control_addr);

    // Destroy the proxy
    zctx_destroy (&ctx);
    zproxy_destroy (&proxy);

    // Defining a control address and no capture address
    // should create a zmq_proxy_steerable proxy that we
    // can control with a control port with no capture
    // port.
    ctx = zctx_new ();
    proxy = zproxy_new (ctx, ZPROXY_STREAMER);

    rc = zproxy_bind (proxy, frontend_addr, backend_addr,
            NULL, control_addr);
    
    assert (rc == 0);

    // Run the actual test
    s_zproxy_test_run (proxy, frontend_addr, backend_addr,
            capture_addr, control_addr);

    // Destroy the proxy
    zctx_destroy (&ctx);
    zproxy_destroy (&proxy);

    // Defining a capture address and no control address
    // should create a zmq_proxy proxy that we
    // can capture data from
    ctx = zctx_new ();
    proxy = zproxy_new (ctx, ZPROXY_STREAMER);

    rc = zproxy_bind (proxy, frontend_addr, backend_addr, 
            capture_addr, NULL);
    
    assert (rc == 0);

    // Run the actual test
    s_zproxy_test_run (proxy, frontend_addr, backend_addr,
            capture_addr, control_addr);

    // Destroy the proxy
    zctx_destroy (&ctx);
    zproxy_destroy (&proxy);

    // Leaving both capture and control undefined
    // should create a zmq_proxy proxy that is
    // not steerable and has no capture port.
    ctx = zctx_new ();
    proxy = zproxy_new (ctx, ZPROXY_STREAMER);

    rc = zproxy_bind (proxy, frontend_addr, backend_addr, 
            NULL, NULL);

    assert (rc == 0);

    // Run the actual test
    s_zproxy_test_run (proxy, frontend_addr, backend_addr,
            capture_addr, control_addr);

    // Destroy the proxy
    zctx_destroy (&ctx);
    zproxy_destroy (&proxy);

#endif
#if (ZMQ_VERSION >= ZPROXY_HAS_PROXY && ZMQ_VERSION < ZPROXY_HAS_STEERABLE)

    char *frontend_addr = "inproc://proxy_front";
    char *backend_addr = "inproc://proxy_back";
    char *capture_addr = "inproc://proxy_capture";

    // Defining a capture address and no control address
    // should create a zmq_proxy proxy that we
    // can capture data from
    zctx_t *ctx = zctx_new ();
    zproxy_t *proxy = zproxy_new (ctx, ZPROXY_STREAMER);

    int rc = zproxy_bind (proxy, frontend_addr, backend_addr, 
            capture_addr);

    assert (rc == 0);

    // Run the actual test
    s_zproxy_test_run (proxy, frontend_addr, backend_addr,
            capture_addr, NULL);

    // Destroy the proxy
    zctx_destroy (&ctx);
    zproxy_destroy (&proxy);
#endif
#if (ZMQ_VERSION < ZPROXY_HAS_PROXY)

    char *frontend_addr = "inproc://proxy_front";
    char *backend_addr = "inproc://proxy_back";

    zctx_t *ctx = zctx_new ();
    zproxy_t *proxy = zproxy_new (ctx, ZPROXY_STREAMER);

    int rc = zproxy_bind (proxy, frontend_addr, backend_addr);

    assert (rc == 0);

    // Run the actual test
    s_zproxy_test_run (proxy, frontend_addr, backend_addr,
            NULL, NULL);

    // Destroy the proxy
    zctx_destroy (&ctx);
    zproxy_destroy (&proxy);
#endif

    // Keep valgrind happy
    zclock_sleep (100);

----

SEE ALSO
--------
linkczmq:czmq[7]
